substitutions:
  devicename: opentherm
  upper_devicename: Opentherm

esphome:
  name: opentherm
  platform: ESP8266
  board: d1_mini
#  arduino_version: '2.7.2' 
  platformio_options:
    lib_deps: 
#    - ihormelnyk/OpenTherm Library @ 1.1.3
    - ESP8266WiFi
    - ESP Async WebServer
  includes:
    - esphome-opentherm/

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${devicename} Fallback"
    password: !secret wifi_password

captive_portal:
logger:
api:
ota:

web_server:
  port: 80

#D5 - это пин к которому подключен датчик. update_interval: задается в секундах. Время через которое будет опрашиваться датчик.
dallas:
  pin: D5
  update_interval: 60s
  

custom_component:
  - lambda: |-
      auto opentherm = new OpenthermComponent();
      return {opentherm};
    
    components:
      - id: opentherm
output:
  - platform: custom
    type: float
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) opentherm;
      auto opentherm_pid_output = new OpenthermFloatOutput();
      openthermComp->set_pid_output(opentherm_pid_output);
      App.register_component(opentherm_pid_output);     
      return {opentherm_pid_output};
    outputs:
      id: pid_output
      #min_power: 30.00%
      #max_power: 90.00%

sensor:
  - platform: dallas
    name: "temperature_kot"
    address: "0x073C01D607EA1628"

  - platform: custom
    lambda: |-    
      OpenthermComponent *openthermComp = (OpenthermComponent*) opentherm;
      return { 
        openthermComp->boiler_temperature, 
        openthermComp->modulation_sensor,
        openthermComp->heating_target_temperature_sensor
        openthermComp->heater_fault_code
      };
    sensors:
    - name: Boiler Temperature
      unit_of_measurement: °C
      accuracy_decimals: 1
    - name: "Boiler Modulation"
      unit_of_measurement: "%"
      accuracy_decimals: 0
    - name: "Heating Target Temperature"
      unit_of_measurement: ºC
      accuracy_decimals: 1
    - name: opentherm_fault_code
      icon: mdi:alert-circle-outline
      accuracy_decimals: 0
      
  - platform: homeassistant
    name: "External Temperature"
    entity_id: sensor.openweathermap_temperature
    unit_of_measurement: °C
    accuracy_decimals: 1  
  - platform: homeassistant
    id: temperature_sensor
    entity_id: sensor.temp_k2
#    entity_id: sensor.temp1_temperature
    name: "Actual temperature"
    unit_of_measurement: °C
  - platform: pid
    name: "PID Climate Result"
    type: RESULT    
  - platform: pid
    name: "PID Climate HEAT"
    type: HEAT    
  - platform: pid
    name: "PID Climate ERROR"
    type: ERROR    

binary_sensor:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) opentherm;
      return {openthermComp->flame};
    binary_sensors:
    - name: "Flame"
      #device_class: heat

switch:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) opentherm;
      return {openthermComp->thermostatSwitch};
    switches:
      name: "Disable PID"
  - platform: template
    name: "PID Climate Autotune"
    turn_on_action:
      - climate.pid.autotune: pid_climate      

climate:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) opentherm;
      return {
        openthermComp->hotWaterClimate, 
        openthermComp->heatingWaterClimate
      };
    climates:
      - id: hot_water
        name: "Hot water"
#        visual:
#          temperature_step: 0.5 °C
      - id: heating_water
        name: "Heating water"
#        visual:
#          temperature_step: 0.5 °C
  - platform: pid
    id: pid_climate
    name: "PID Climate Controller"
    visual:
      min_temperature: 10 °C
      max_temperature: 30 °C
      temperature_step: 0.1 °C
    sensor: temperature_sensor
    default_target_temperature: 24°C
    heat_output: pid_output
    control_parameters:
      kp: 0.38197
      ki: 0.01012
      kd: 3.60387
